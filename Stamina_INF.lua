-- ======================================================
-- üí™ BOOST DE STAMINA (Optimizado)
-- ======================================================

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- --- OPTIMIZACI√ìN 1: Cache de referencias ---
-- Guardamos las carpetas aqu√≠ para no buscarlas cada vez
local folderCache = {}
local validFolderNames = {"Students", "Alices", "Teachers"}

-- Guardamos el modelo del jugador aqu√≠ para no buscarlo cada segundo
local cachedModel = nil

-- ------------------------------------------------------

-- üß≠ Busca el modelo del jugador (versi√≥n optimizada)
local function getCharacterModel()
	-- 1. Revisa si el modelo en cach√© sigue siendo v√°lido
	if cachedModel and cachedModel.Parent then
		-- Revisa si el padre sigue siendo una de las carpetas v√°lidas
		local parentName = cachedModel.Parent.Name
		if folderCache[parentName] then
			return cachedModel -- ¬°Sigue v√°lido! No busques m√°s.
		end
	end

	-- 2. Si no es v√°lido o no existe, busca de nuevo
	cachedModel = nil -- Limpia el cach√©
	for folderName, folder in pairs(folderCache) do
		if folder then -- Asegurarse que la carpeta existe
			local model = folder:FindFirstChild(LocalPlayer.Name)
			if model and model:IsA("Model") then
				cachedModel = model -- ¬°Encontrado! Gu√°rdalo en el cach√©
				return model
			end
		end
	end
	
	return nil -- No se encontr√≥ en ninguna carpeta
end

-- ‚öôÔ∏è Aplica los atributos de stamina al modelo
local function applyBoost(model)
	-- Se le pasa el modelo para no tener que buscarlo otra vez
	if not model then return end

	-- Usamos un solo SetAttribute. Si el atributo no existe, esto lo crear√°.
	-- Si tu juego REQUIERE que el atributo exista, vuelve a tu m√©todo con GetAttribute
	model:SetAttribute("Stamina", 1000)
	model:SetAttribute("MaxStamina", 1000)
end

-- === OPTIMIZACI√ìN 2: L√≥gica Principal Unificada ===

-- Funci√≥n que se ejecuta una sola vez y maneja todo
local function main()
	
	-- 1. Espera y encuentra las carpetas v√°lidas UNA SOLA VEZ
	for _, name in ipairs(validFolderNames) do
		-- Espera hasta 15 segundos por cada carpeta. Si no aparece, la ignora.
		local folder = Workspace:WaitForChild(name, 15)
		if folder then
			folderCache[name] = folder -- Guarda la carpeta en el cach√©
		end
	end

	-- 2. Conexi√≥n al respawn (CharacterAdded)
	-- Esto solo limpia el cach√©. El loop principal se encargar√° de buscar el nuevo.
	LocalPlayer.CharacterAdded:Connect(function(character)
		cachedModel = nil -- El modelo antiguo ya no sirve, b√≥rralo del cach√©
		-- El loop de abajo se encargar√° de encontrar el nuevo modelo
	end)

	-- 3. Loop principal de actualizaci√≥n (¬°SOLO UNO!)
	-- Este loop se encarga de:
	--    a) Aplicar el boost la primera vez.
	--    b) Aplicar el boost despu√©s de un respawn (porque cachedModel ser√° nil).
	--    c) Aplicar el boost si el modelo se mueve de carpeta (porque el cach√© se invalidar√°).
	while true do 
		local model = getCharacterModel() -- Esta funci√≥n ahora es muy r√°pida gracias al cach√©
		if model then
			applyBoost(model)
		end
		task.wait(1) -- Revisa solo una vez por segundo
	end
end

-- üöÄ Inicia el script principal en un hilo separado
task.spawn(main)
